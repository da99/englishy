// Generated by CoffeeScript 1.3.3
(function() {
  var Block, Englishy, Line, Stringy, string_da99, _;

  _ = require("underscore");

  string_da99 = require("string_da99");

  exports.stringy_compare = function(a, b) {
    var str_a, str_b;
    str_a = a.value ? a.value() : a;
    str_b = b.value ? b.value() : b;
    return str_a === str_b;
  };

  if (!Array.prototype.last) {
    Array.prototype.last = function(n) {
      n = typeof n !== 'undefined' ? n : 1;
      return this[this.length - n];
    };
  }

  exports.Stringy = Stringy = (function() {

    Stringy.is_quoted = function(str) {
      return _.first(str) === '"' && _.last(str) === '"';
    };

    Stringy.to_strings = function(arr) {
      var new_arr, v, _i, _len;
      new_arr = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        v = arr[_i];
        new_arr.push(v.value ? v.value() : v);
      }
      return new_arr;
    };

    function Stringy(str) {
      var v;
      if (arguments.length !== 1) {
        throw new Error("Only one argument is allowed: " + (((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = arguments.length; _i < _len; _i++) {
            v = arguments[_i];
            _results.push(v);
          }
          return _results;
        }).apply(this, arguments)).join(', ')));
      }
      this.quoted = false;
      this.target = Stringy.is_quoted(str) ? (this.quoted = true, str.substring(1, str.length - 1)) : str;
    }

    Stringy.prototype.is_stringy = function() {
      return true;
    };

    Stringy.prototype.is_quoted = function() {
      return this.quoted;
    };

    Stringy.prototype.value = function() {
      return this.target;
    };

    return Stringy;

  })();

  exports.Line = Line = (function() {

    function Line() {
      this.d = {};
      this.d.number = void 0;
      this.d.text = "";
      this.d.block = null;
    }

    Line.prototype.is_empty = function() {
      return this.d.text.length === 0;
    };

    Line.prototype.has_block = function() {
      return this.d.block !== null;
    };

    Line.prototype.number = function() {
      return this.d.number;
    };

    Line.prototype.text = function() {
      return this.d.text;
    };

    Line.prototype.block = function() {
      return this.d.block;
    };

    Line.prototype.create_block = function() {
      if (this.has_block()) {
        return false;
      }
      return this.d.block = new Block();
    };

    Line.prototype.update_number = function(n) {
      return this.d.number = n;
    };

    Line.prototype.update_text = function(str) {
      return this.d.text = str;
    };

    Line.prototype.append = function(str) {
      return this.d.text = "" + (this.text()) + str;
    };

    Line.prototype.finish_writing = function() {
      var b;
      b = this.block();
      return b && b.finish_writing();
    };

    return Line;

  })();

  exports.Block = Block = (function() {

    function Block(str) {
      this.d = {};
      this.d.text = str || "";
      this.regex = {};
      this.regex.new_lines_at_start = /^[\n]+/;
      this.regex.new_lines_at_end = /[\n]+$/;
      this.regex.whitespace = /^\s+|\s+$/g;
    }

    Block.prototype.text = function() {
      return this.d.text;
    };

    Block.prototype.is_empty = function() {
      return this.text().is_empty();
    };

    Block.prototype.is_whitespace = function() {
      return this.text().is_whitespace();
    };

    Block.prototype.text_line = function(line_num) {
      var lines, target, target_i, v;
      target_i = line_num - 1;
      lines = (function() {
        var _i, _len, _ref, _results;
        _ref = this.text().strip().split("\n");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (!v.is_whitespace()) {
            _results.push(v);
          }
        }
        return _results;
      }).call(this);
      target = lines[target_i];
      return target || (function() {
        throw new Error("No text line #" + line_num + ".");
      })();
    };

    Block.prototype.append = function(str) {
      return this.d.text = "" + this.d.text + str;
    };

    Block.prototype.append_line = function(line) {
      var two;
      two = "  ";
      if (line.indexOf(two) === 0) {
        line = line.replace(two, "");
      }
      if (this.is_empty()) {
        return this.d.text = line;
      } else {
        return this.d.text = "" + (this.text()) + "\n" + line;
      }
    };

    Block.prototype.finish_writing = function() {
      this.d.text = this.d.text.replace(this.regex.new_lines_at_start, "");
      this.d.text = this.d.text.replace(this.regex.new_lines_at_end, "");
      return this.d.text;
    };

    return Block;

  })();

  exports.Englishy = Englishy = (function() {

    function Englishy(str) {
      this.d = {};
      this.d.starting_text = str;
      this.d.working_text = str.standardize();
      this.lines = [];
      this.error = null;
      this.parse();
    }

    Englishy.prototype.record_error = function(msg) {
      var err;
      err = new Error(msg);
      err.msg = msg;
      throw err;
      this.lines = err;
      return this.error = this.lines;
    };

    Englishy.prototype.last_error = function() {
      return this.error;
    };

    Englishy.prototype.append_to_line = function(str) {
      return this.lines.last().append(str);
    };

    Englishy.prototype.append_to_block = function(l) {
      return this.lines.last().block().append_line(l);
    };

    Englishy.prototype.push_new_line = function(l) {
      var new_line;
      new_line = new Line();
      new_line.append(l);
      if (this.start_of_block(l)) {
        new_line.create_block();
      }
      return this.lines.push(new_line);
    };

    Englishy.Quotation_Mark_Split = /("[^"]+")/g;

    Englishy.pair_to_tokens = function(pair, var_regexp) {
      var arr, block, i, line, line_arr, line_arr_w_empty_strings, piece, v, val, ws, _i, _len;
      line = pair[0].replace(/[.:]$/, "");
      block = pair[1];
      line_arr = line.split(this.Quotation_Mark_Split);
      for (i = _i = 0, _len = line_arr.length; _i < _len; i = ++_i) {
        val = line_arr[i];
        piece = line_arr[i];
        line_arr[i] = (function() {
          var _j, _len1, _ref;
          if (Stringy.is_quoted(piece)) {
            return new exports.Stringy(piece);
          } else {
            if (var_regexp) {
              arr = [];
              _ref = piece.split(var_regexp);
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                v = _ref[_j];
                if (v.strip && var_regexp.test(v)) {
                  arr.push(new exports.Stringy(v));
                } else {
                  arr.push((function() {
                    var _k, _len2, _ref1, _results;
                    _ref1 = v.whitespace_split();
                    _results = [];
                    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                      ws = _ref1[_k];
                      _results.push(new exports.Stringy(ws));
                    }
                    return _results;
                  })());
                }
              }
            } else {
              arr = (function() {
                var _k, _len2, _ref1, _results;
                _ref1 = piece.whitespace_split();
                _results = [];
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                  ws = _ref1[_k];
                  _results.push(new exports.Stringy(ws));
                }
                return _results;
              })();
            }
            return arr;
          }
        })();
      }
      line_arr_w_empty_strings = _.flatten(line_arr);
      line_arr = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = line_arr_w_empty_strings.length; _j < _len1; _j++) {
          v = line_arr_w_empty_strings[_j];
          if (v.value() !== "") {
            _results.push(v);
          }
        }
        return _results;
      })();
      if (block && !block.text) {
        return [line_arr, new Block(block)];
      } else if (block && block.text) {
        return [line_arr, block];
      } else {
        return [line_arr];
      }
    };

    Englishy.prototype.to_tokens = function(var_regexp) {
      var line, tokens, _i, _len, _ref;
      tokens = [];
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (line.has_block()) {
          tokens.push(this.constructor.pair_to_tokens([line.text(), line.block()], var_regexp));
        } else {
          tokens.push(this.constructor.pair_to_tokens([line.text()], var_regexp));
        }
      }
      return tokens;
    };

    Englishy.prototype.to_array = function() {
      var arr, line, _i, _len, _ref;
      arr = [];
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (line.has_block()) {
          arr.push([line.text(), line.block().text()]);
        } else {
          arr.push([line.text()]);
        }
      }
      return arr;
    };

    Englishy.prototype.is_empty = function() {
      return this.lines.length === 0;
    };

    Englishy.prototype.in_sentence = function() {
      var l;
      if (!this.lines.last()) {
        return false;
      }
      if (this.in_block()) {
        return false;
      }
      l = this.lines.last().text().strip();
      return !(l.has_end_period());
    };

    Englishy.prototype.in_block = function() {
      if (this.is_empty()) {
        return false;
      }
      return this.lines.last().has_block();
    };

    Englishy.prototype.start_of_block = function(line) {
      return line.strip().has_end_colon();
    };

    Englishy.prototype.full_sentence = function(line) {
      return line.strip().has_end_period();
    };

    Englishy.prototype._process_line = function(line) {
      var b, l;
      if (line.is_whitespace() && !this.in_block() && !this.in_sentence()) {
        return null;
      }
      if (line.is_empty() && !this.in_block() && !this.in_sentence()) {
        return null;
      }
      l = line.strip();
      if (this.in_block() && (line.begins_with_whitespace() || line.is_empty())) {
        b = this.lines.last().block();
        return b.append_line(line);
      }
      if (!this.in_sentence() && (this.start_of_block(l) || this.full_sentence(l))) {
        this.push_new_line(l);
        return l;
      }
      if (this.in_sentence()) {
        if (this.start_of_block(l)) {
          return this.record_error("Incomplete sentence before block: " + (this.lines.last().text()));
        }
        return this.append_to_line(line);
      }
      if (!this.in_block() && !this.full_sentence(l)) {
        return this.push_new_line(line);
      }
      return this.unknown_fragment(line);
    };

    Englishy.prototype.unknown_fragment = function(l) {
      throw this.record_error("Unknown fragment: " + l);
    };

    Englishy.prototype.parse = function() {
      var line, raw_lines, _i, _len, _ref;
      raw_lines = this.d.working_text.remove_indentation().split("\n");
      while ((this.error === null) && raw_lines.length > 0) {
        this._process_line(raw_lines.shift());
      }
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        line.finish_writing();
      }
      if (this.lines.last && this.in_sentence()) {
        this.unknown_fragment("'" + (this.lines.last().text()) + "'");
      }
      return this.lines;
    };

    return Englishy;

  })();

}).call(this);
