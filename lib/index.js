// Generated by CoffeeScript 1.3.3
(function() {
  var Block, Englishy, Line, Stringy,
    __slice = [].slice;

  if (!Array.prototype.last) {
    Array.prototype.last = function(n) {
      n = typeof n !== 'undefined' ? n : 1;
      return this[this.length - n];
    };
  }

  exports.Stringy = Stringy = (function() {

    function Stringy(parent) {
      this.str = parent;
      this.HEAD_WHITE_SPACE = /^[\s]+/;
      this.END_PERIOD = /\.$/;
      this.END_COLON = /\:$/;
    }

    Stringy.prototype.strip = function() {
      return this.str.replace(/^\s+|\s+$/g, '');
    };

    Stringy.prototype.is_empty = function() {
      return this.str.length === 0;
    };

    Stringy.prototype.is_whitespace = function() {
      return this.strip().length === 0;
    };

    Stringy.prototype.strip_beginning_empty_lines = function(lines) {
      var arr, line, _i, _len;
      arr = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (line.englishy('strip') !== "") {
          arr.push(line);
        }
      }
      return arr;
    };

    Stringy.prototype.remove_indentation = function() {
      var final, indent, indent_meta, l, lines;
      if (this.strip() === "") {
        return "";
      }
      lines = this.strip_beginning_empty_lines(this.str.split("\n"));
      indent_meta = this.HEAD_WHITE_SPACE.exec(lines[0]);
      if (!indent_meta) {
        return lines.join("\n");
      }
      indent = indent_meta[0];
      final = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          l = lines[_i];
          _results.push(l.replace(indent, ""));
        }
        return _results;
      })();
      return final.join("\n");
    };

    return Stringy;

  })();

  String.prototype.englishy = function() {
    var args, meth, _ref, _ref1;
    meth = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (_ref = ((_ref1 = this.englishy_obj) != null ? _ref1 : this.englishy_obj = new Stringy(this)))[meth].apply(_ref, args);
  };

  exports.Line = Line = (function() {

    function Line() {
      this.d = {};
      this.d.number = void 0;
      this.d.text = "";
      this.d.block = null;
    }

    Line.prototype.is_empty = function() {
      return this.d.text.length === 0;
    };

    Line.prototype.has_block = function() {
      return this.d.block !== null;
    };

    Line.prototype.number = function() {
      return this.d.number;
    };

    Line.prototype.text = function() {
      return this.d.text;
    };

    Line.prototype.block = function() {
      return this.d.block;
    };

    Line.prototype.create_block = function() {
      if (this.has_block()) {
        return false;
      }
      return this.d.block = new Englishy.Block();
    };

    Line.prototype.update_number = function(n) {
      return this.d.number = n;
    };

    Line.prototype.update_text = function(str) {
      return this.d.text = str;
    };

    Line.prototype.append = function(str) {
      return this.d.text = "" + (this.text()) + str;
    };

    return Line;

  })();

  exports.Block = Block = (function() {

    function Block() {
      this.d = {};
      this.d.text = "";
      this.regex = {};
      this.regex.new_lines_at_start = /^[\n]+/;
      this.regex.new_lines_at_end = /[\n]+$/;
      this.regex.whitespace = /^\s+|\s+$/g;
    }

    Block.prototype.text = function() {
      return this.d.text;
    };

    Block.prototype.is_empty = function() {
      return this.text().englishy('is_empty');
    };

    Block.prototype.is_whitespace = function() {
      return this.text().englishy('is_whitespace');
    };

    Block.prototype.append = function(str) {
      return this.d.text = "" + this.d.text + str;
    };

    Block.prototype.append_line = function(line) {
      if (this.is_empty()) {
        return this.d.text = line;
      } else {
        return this.d.text = "" + (this.text()) + "\n" + line;
      }
    };

    Block.prototype.finish_writing = function() {
      this.d.text = this.d.text.replace(this.regex.new_lines_at_start, "");
      this.d.text = this.d.text.replace(this.regex.new_lines_at_end, "");
      return this.d.text;
    };

    return Block;

  })();

  exports.Englishy = Englishy = (function() {

    function Englishy(str) {
      this.HEAD_WHITE_SPACE = /^\s/;
      this.END_PERIOD = /\.$/;
      this.END_COLON = /\:$/;
      this.string = str.replace(/\t/, "  ").replace(/\r/, "");
      this.lines = [];
      this.error = null;
      this.parse();
    }

    Englishy.prototype.record_error = function(msg) {
      var err;
      err = new Error(msg);
      err.msg = msg;
      this.lines = err;
      return this.error = this.lines;
    };

    Englishy.prototype.last_error = function() {
      return this.error;
    };

    Englishy.prototype.last_line = function() {
      var last;
      last = this.lines.last();
      return last && last.text;
    };

    Englishy.prototype.last_block = function() {
      var last;
      last = this.lines.last();
      return last && last.block().text;
    };

    Englishy.prototype.append_to_line = function(str) {
      return this.lines.last().append(str);
    };

    Englishy.prototype.append_to_block = function(l) {
      return this.last_block().append_line(l);
    };

    Englishy.prototype.push_new_line = function(l) {
      var new_line;
      new_line = new this.Line();
      new_line.append(l);
      if (this.start_of_block(l)) {
        new_line.create_block();
      }
      return this.lines.push(new_line);
    };

    Englishy.prototype.array = function() {
      return this.lines;
    };

    Englishy.prototype.in_sentence = function() {
      var l;
      if (!this.last_line()) {
        return false;
      }
      if (this.in_block()) {
        return false;
      }
      l = this.strip(this.last_line());
      return !(this.END_PERIOD.test(l));
    };

    Englishy.prototype.in_block = function() {
      if (this.is_empty()) {
        return false;
      }
      return this.last_line().has_block();
    };

    Englishy.prototype.start_of_block = function(line) {
      return this.END_COLON.test(this.strip(line));
    };

    Englishy.prototype.full_sentence = function(line) {
      return this.END_PERIOD.test(this.strip(line));
    };

    Englishy.prototype._process_line = function(line) {
      var begins_with_whitespace, l;
      if (this.is_empty(line) && !this.in_block() && !this.in_sentence()) {
        return null;
      }
      l = this.strip(line);
      begins_with_whitespace = this.HEAD_WHITE_SPACE.test(line);
      if (this.in_block()) {
        if (line.length === 0 && this.last_block() === '') {
          return line;
        }
        if (this.is_block_empty() && line.length > 0 && this.is_empty(l)) {
          this.append_to_block(line + "\n");
          return line;
        }
        if (begins_with_whitespace || this.is_empty(l)) {
          this.append_to_block(line + "\n");
          return line;
        }
      }
      if (!this.in_sentence() && (this.start_of_block(l) || this.full_sentence(l))) {
        this.push_new_line(l);
        return l;
      }
      if (this.in_sentence()) {
        if (this.start_of_block(l)) {
          return this.record_error("Incomplete sentence before block: " + (this.last_line()));
        }
        return this.append_to_line(line);
      }
      if (!this.in_block() && !this.full_sentence(l)) {
        return this.push_new_line(line);
      }
      return this.unknown_fragment(line);
    };

    Englishy.prototype.unknown_fragment = function(l) {
      return this.record_error("Unknown fragment: " + l);
    };

    Englishy.prototype.parse = function() {
      var line, raw_lines, _i, _len, _ref;
      raw_lines = this.remove_indentation(this.string).split("\n");
      while ((this.error === null) && raw_lines.length > 0) {
        this._process_line(raw_lines.shift());
      }
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        line.cleanup();
      }
      if (this.lines.last && this.in_sentence()) {
        this.unknown_fragment(this.last_line());
      }
      return this.lines;
    };

    return Englishy;

  })();

}).call(this);
