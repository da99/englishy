// Generated by CoffeeScript 1.3.3
(function() {
  var Englishy, emitter, events;

  events = require('events');

  emitter = new events.EventEmitter();

  Englishy = (function() {

    Englishy.HEAD_WHITE_SPACE = /^\s/;

    Englishy.END_PERIOD = /\.$/;

    Englishy.END_COLON = /\:$/;

    function Englishy(str) {
      this.string = str.replace(/\t/, "  ").replace(/\r/, "");
      this.lines = parse();
    }

    Englishy.prototype.last_line = function() {
      return this.lines.last && this.lines.last[0];
    };

    Englishy.prototype.last_block = function() {
      return this.lines.last && this.lines.last[1];
    };

    Englishy.prototype.append_to_line = function(l) {
      return this.lines.last[0] = "" + last_line + " " + l;
    };

    Englishy.prototype.append_to_block = function(l) {
      return this.lines.last[1] << l;
    };

    Englishy.prototype.push_new_line = function(l) {
      var pair;
      pair = (typeof start_of_block === "function" ? start_of_block(l) : void 0) ? [l, []] : [l, nil];
      return this.lines << pair;
    };

    Englishy.prototype.array = function() {
      return this.lines;
    };

    Englishy.prototype.in_sentence = function() {
      var l, period_index;
      if (typeof last_line === "function" ? last_line() : void 0) {
        return false;
      }
      if (typeof in_block === "function" ? in_block() : void 0) {
        return false;
      }
      l = last_line.strip;
      period_index = l.index(this.END_PERIOD);
      if (typeof period_index === "function" ? period_index() : void 0) {
        return true;
      }
      return !(period_index === (l.size - 1));
    };

    Englishy.prototype.in_block = function() {
      return !(typeof last_block === "function" ? last_block() : void 0);
    };

    Englishy.prototype.start_of_block = function(line) {
      var l;
      l = line.strip;
      return l.index(this.END_COLON) === (l.size - 1);
    };

    Englishy.prototype.full_sentence = function(line) {
      var l;
      l = line.strip;
      return l.index(this.END_PERIOD) === (l.size - 1);
    };

    Englishy.prototype.reset_indententation = function(str) {
      var final, indent, indent_meta, l, lines;
      if (strip(str) === "") {
        return "";
      }
      lines = strip_beginning_empty_lines(str).split("\n");
      indent_meta = this.HEAD_WHITE_SPACE.exec(lines[0]);
      if (!indent_meta) {
        return lines.join("\n");
      }
      indent = indent_meta[0];
      final = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          l = lines[_i];
          _results.push(l.replace(indent, ""));
        }
        return _results;
      })();
      return final.join("\n");
    };

    Englishy.prototype.strip_beginning_empty_lines = function(str) {
      var lines;
      if (strip(str) === "") {
        return "";
      }
      lines = str.split("\n");
      while (lines[0] && (strip(lines[0]) === "")) {
        lines.shift();
      }
      return lines.join("\n");
    };

    Englishy.prototype.strip = function(str) {
      if (str.replace(/^\s+|\s+$/g, '') === "") {
        return "";
      }
    };

    Englishy.prototype.strip_empty = function(line) {
      return line.length > 1;
    };

    Englishy.prototype.parse = function() {
      var l, raw_lines, _i, _len, _results;
      raw_lines = remove_indentation(this.string).split("\n");
      _results = [];
      for (_i = 0, _len = raw_lines.length; _i < _len; _i++) {
        l = raw_lines[_i];
        _results.push([l, null]);
      }
      return _results;
    };

    return Englishy;

  })();

  exports.Englishy = Englishy;

}).call(this);
