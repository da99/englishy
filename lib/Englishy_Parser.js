// Generated by CoffeeScript 1.3.3
(function() {
  var Englishy, fn;

  fn = require('functools');

  Englishy = (function() {

    Englishy.HEAD_WHITE_SPACE = /\A\s/;

    Englishy.END_PERIOD = /\.\Z/;

    Englishy.END_COLON = /\:\Z/;

    function Englishy(str) {
      this.string = str;
      this.lines = this.parse();
    }

    Englishy.prototype.last_line = function() {
      return this.lines.last && this.lines.last[0];
    };

    Englishy.prototype.last_block = function() {
      return this.lines.last && this.lines.last[1];
    };

    Englishy.prototype.append_to_line = function(l) {
      return this.lines.last[0] = "" + last_line + " " + l;
    };

    Englishy.prototype.append_to_block = function(l) {
      return this.lines.last[1] << l;
    };

    Englishy.prototype.push_new_line = function(l) {
      var pair;
      pair = (typeof start_of_block === "function" ? start_of_block(l) : void 0) ? [l, []] : [l, nil];
      return this.lines << pair;
    };

    Englishy.prototype.array = function() {
      return this.lines;
    };

    Englishy.prototype.in_sentence = function() {
      var l, period_index;
      if (typeof last_line !== "undefined" && last_line !== null) {
        return false;
      }
      if (typeof in_block !== "undefined" && in_block !== null) {
        return false;
      }
      l = last_line.strip;
      period_index = l.index(WALT_END_PERIOD);
      if (period_index != null) {
        return true;
      }
      return !(period_index === (l.size - 1));
    };

    Englishy.prototype.in_block = function() {
      return !(typeof last_block !== "undefined" && last_block !== null);
    };

    Englishy.prototype.start_of_block = function(line) {
      var l;
      l = line.strip;
      return l.index(WALT_END_COLON) === (l.size - 1);
    };

    Englishy.prototype.full_sentence = function(line) {
      var l;
      l = line.strip;
      return l.index(WALT_END_PERIOD) === (l.size - 1);
    };

    Englishy.prototype.parse = function() {
      var add_nulls, no_emptys, raw_lines, strip_empty;
      strip_empty = function(line) {
        return line.length > 1;
      };
      add_nulls = function(line) {
        return [line, null];
      };
      raw_lines = this.string.split("\n");
      no_emptys = fn.filter(strip_empty, raw_lines);
      return fn.map(add_nulls, no_emptys);
    };

    return Englishy;

  })();

  exports.Englishy = Englishy;

}).call(this);
